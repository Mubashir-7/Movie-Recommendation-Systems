# -*- coding: utf-8 -*-
"""Movie Recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AZlhiyORtVV5Y0T3RBJy6A_1jFRN62yc
"""

import numpy as np
import pandas as pd
import difflib
# convert textual data to numeric value
from sklearn.feature_extraction.text import TfidfVectorizer
#main component to check similarity b/t movies
from sklearn.metrics.pairwise import cosine_similarity

m_data = pd.read_csv('movies.csv')
m_data.head()

m_data.tail()

m_data.shape

selected_features = ['genres','keywords','tagline','cast','director']

#filling null values in the dataset with null string
for feature in selected_features:
    m_data[feature] = m_data[feature].fillna('')

combined_feature = m_data['genres']+' '+m_data['keywords']+' '+m_data['tagline']+' '+m_data['cast']+' '+m_data['director']
print(combined_feature)

#CONVERTING THESE FEATURE (textual) INTO NUMERIC VALUES
vectorizer = TfidfVectorizer()

f_v = vectorizer.fit_transform(combined_feature)

print(f_v)

similarity = cosine_similarity(f_v)

print(similarity)

print(similarity.shape)

m_name =input('Enter the movie you want recomendation for :- ')

all_titles = m_data['title'].tolist()
print(all_titles)

recomendation =  difflib.get_close_matches(m_name,all_titles)
print(recomendation)

closest_match = recomendation[0]
print(closest_match)

index = m_data[m_data.title == closest_match]['index'].values[0]
print(index)

similariy_score = list(enumerate(similarity[index]))
print(similariy_score)
len(similariy_score)

#sorted_similar_movies
s_s_m = sorted(similariy_score,key = lambda x:x[1],reverse = True)
print(s_s_m)

print('Movies recomendation for you are :- ')
i=1
for movie in s_s_m:
    index = movie[0]
    title = m_data[m_data.index==index]['title'].values[0]
    if(i<15):
        print(i,'.',title)
        i+=1

"""MOVIE RECOMENDATION SYSTEM"""

m_name =input('Enter the movie you want recomendation for :- ')

all_titles = m_data['title'].tolist()

recomendation =  difflib.get_close_matches(m_name,all_titles)


index = m_data[m_data.title == recomendation[0]]
index = index['index'].values[0]

similariy_score = list(enumerate(similarity[index]))

s_s_m = sorted(similariy_score,key = lambda x:x[1],reverse = True)

print('Movies recomendation for you are :- ')
i=1
for movie in s_s_m:
    index = movie[0]
    title = m_data[m_data.index==index]['title'].values[0]
    if(i<16):
        print(i,'.',title)
        i+=1